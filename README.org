#+TITLE: Meteonet dataset and associated dataloader

* Objectives
  Write the most efficient dataloader for meteonet, both for
  classification, and regression.
  Then, adapt it to Vincent's code, then all my students codes.

  Compared to data prepared by Vincent, there is no PPMatrix nor
  train/val subdirectories.

* Structure of this repository 

:  download-meteonet.sh   # script that downloads meteonet dataset
:  loader/                # torch dataloader functions
:     utilities.py        # various functions
:     meteonet.py         # the MeteonetDataset class
:     samplers.py         # oversampling routines
:     filesets.py         # split meteonet files in train/val/test
:     plots.py            # plot functions
:  models/                # Currently only U-net to test training
:  trainers/              # Subroutines for training
:  train-*.py             # training procedures
:  eval-*.py              # evaluation procedures
:  tests/*.py             # various unity tests

* Setup 
  - requirements: pytorch, matplotlib, numpy, tqdm, tensorboard, pandas
  - Usage:
    1. download one of the two datasetss:
       : % ./download-meteonet.sh
    2. run =train-classif.py=
       : % python train-* -h   # for usage *=classification or regression
       : % python train-*      # start a training only on rainmaps with a correct hyperparameters setup
       : % python eval-classif # evaluation of last run on the test sets
       : % python train-* -wd data/windmaps   # start a training on rainmaps and windmaps
       
* Roadmap
  - =loader/meteonet.py= DONE
  - =loader/samplers.py= DONE
  - training (only rainmaps) on small dataset: DONE
  - training (only rainmaps) on large dataset: DONE
  - training with windmaps: DONE
  - scores on test set and visualisation: DONE
  - more metrics: DONE
  - add README/COPYRIGHT in meteonet dataset archives: DONE
  - add radar_coord.npz, constants.py in meteonet dataset archives:
    DONE
  - train Unet in regression: in progress
  - more models (ED-DRAP, Small-At, ...): TODO
  - bayesian grid search: TODO (objective function ?)
  

